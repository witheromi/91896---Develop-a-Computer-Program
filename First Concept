########################################################################
### This program is so we know what party items customers have hired ###
########################################################################

# Import tkinter so we can make a GUI
from tkinter import *
from tkinter import ttk, messagebox
import random

# Quit subroutine
def quit_app():
    if messagebox.askokcancel("Quit", "Do you really want to quit?"):
        main_window.destroy()

# Save customer information to a file
def save_info():
    full_name_info = entry_full_name.get()
    receipt_number_info = entry_receipt_number.get()
    party_items_info = combo_party_items.get()
    no_items_info = entry_no_item_hired.get()

    with open("customer_details.txt", "a") as file:
        file.write(f"{full_name_info},{receipt_number_info},{party_items_info},{no_items_info}\n")

    print(f"{full_name_info}, your order has been registered successfully")

    entry_full_name.delete(0, END)
    entry_receipt_number.delete(0, END)
    combo_party_items.set('')  # Clear the combo box
    entry_no_item_hired.delete(0, END)

# Print details of all the customers
def print_customer_details():
    name_count = 0
    # Create the column headings
    Label(main_window, bg='lightblue', font=("MonoLisa 10 bold"), text="Row").grid(column=0, row=7)
    Label(main_window, bg='lightblue', font=("MonoLisa 10 bold"), text="Full Name").grid(column=1, row=7)
    Label(main_window, bg='lightblue', font=("MonoLisa 10 bold"), text="Receipt Number").grid(column=2, row=7)
    Label(main_window, bg='lightblue', font=("MonoLisa 10 bold"), text="Party Items").grid(column=3, row=7)
    Label(main_window, bg='lightblue', font=("MonoLisa 10 bold"), text="No. of Items Hired").grid(column=4, row=7)

    # Add each item in the list into its own row
    for i, details in enumerate(customer_details):
        Label(main_window, bg='lightblue', text=i).grid(column=0, row=i+8)
        Label(main_window, bg='lightblue', text=details[0]).grid(column=1, row=i+8)
        Label(main_window, bg='lightblue', text=details[1]).grid(column=2, row=i+8)
        Label(main_window, bg='lightblue', text=details[2]).grid(column=3, row=i+8)
        Label(main_window, bg='lightblue', text=details[3]).grid(column=4, row=i+8)

# Check the inputs are all valid
def check_inputs():
    input_check = 0
    max_name_length = 20
    max_receipt_number_length = 6

    # Validate full name
    if len(entry_full_name.get()) == 0:
        messagebox.showerror("Input Error", "Full Name is required.")
        input_check = 1
    elif len(entry_full_name.get()) > max_name_length:
        messagebox.showerror("Input Error", f"Full Name can have a maximum of {max_name_length} characters.")
        input_check = 1
    elif entry_full_name.get().isdigit():
        messagebox.showerror("Input Error", "Full Name should contain only alphabets.")
        input_check = 1

    # Validate receipt number
    receipt_number = entry_receipt_number.get()
    if len(receipt_number) == 0:
        messagebox.showerror("Input Error", "Receipt Number is required.")
        input_check = 1
    elif receipt_number.isalpha():
        messagebox.showerror("Input Error", "Receipt Number should contain only numbers.")
        input_check = 1
    elif len(receipt_number) > max_receipt_number_length:
        messagebox.showerror("Input Error", f"Receipt Number can have a maximum of {max_receipt_number_length} digits.")
        input_check = 1

    # Validate party items selection
    if len(combo_party_items.get()) == 0:
        messagebox.showerror("Input Error", "Party Items selection is required.")
        input_check = 1

    # Validate number of items hired
    no_items_hired = entry_no_item_hired.get()
    if len(no_items_hired) == 0:
        messagebox.showerror("Input Error", "Number of Items Hired is required.")
        input_check = 1
    elif not no_items_hired.isdigit():
        messagebox.showerror("Input Error", "Number of Items Hired should contain only numbers.")
        input_check = 1

    if input_check == 0:
        append_name()

# Add the next customer to the list
def append_name():
    # Append each item to its own area of the list
    customer_details.append([entry_full_name.get(), entry_receipt_number.get(), combo_party_items.get(), entry_no_item_hired.get()])
    counters['total_entries'] += 1
    save_info()
    messagebox.showinfo("Success", "Customer details submitted successfully!")

def delete_row():

    # find which row is to be deleted and delete it
    del customer_details[int(delete_item.get())]
    counters['total_entries'] -= 1
    name_count = counters['name_count']
    delete_item.delete(0, 'end')
    
    # clear the last item displayed on the GUI
    Label(main_window, text="       ").grid(column=0, row=name_count + 7)
    Label(main_window, text="       ").grid(column=1, row=name_count + 7)
    Label(main_window, text="       ").grid(column=2, row=name_count + 7)
    Label(main_window, text="       ").grid(column=3, row=name_count + 7)
    Label(main_window, text="       ").grid(column=4, row=name_count + 7)
    Label(main_window, text="       ").grid(column=5, row=name_count + 7)

# Delete a row from the list
# Generate a random receipt number
def generate_random():
    random_number = random.randint(1, 1000000)
    entry_receipt_number.delete(0, END)
    entry_receipt_number.insert(0, random_number)


# Create the buttons and labels
def setup_buttons():
    # Create all the empty and default labels, buttons, and entry boxes. Put them in the correct grid location
    Label(main_window, text="Full Name", bg='lightblue', font=("MonoLisa 10")).grid(column=0, row=0, sticky=E)
    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Receipt Number #", command=generate_random).grid(column=0, row=1, sticky=E)
    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Quit", command=quit_app, width=10).grid(column=4, row=0, sticky=E)
    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Submit Details", command=check_inputs).grid(column=3, row=1)
    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Print Details", command=print_customer_details, width=10).grid(column=4, row=1, sticky=E)
    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="Party Items").grid(column=0, row=2, sticky=E)
    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="No. of Items Hired").grid(column=0, row=3, sticky=E)
    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="Row #").grid(column=3, row=2, sticky=E)
    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Delete Row", command=delete_row, width=10).grid(column=4, row=3, sticky=E)

# Start the program running
def main():
    setup_buttons()
    main_window.mainloop()

# Create empty list for customer details and empty variable for entries in the list
counters = {'total_entries': 0}
customer_details = []
main_window = Tk()
main_window.title("Customer Receipts")
main_window.geometry("525x300")
main_window.configure(background='lightblue')

entry_full_name = Entry(main_window)
entry_full_name.grid(column=1, row=0)
entry_receipt_number = Entry(main_window)
entry_receipt_number.grid(column=1, row=1)
combo_party_items = ttk.Combobox(main_window, values=["Napkins", "Party Hats", "Cutlery", "Balloons", "Plates", "Cups", "Banners","Pinatas", "Table Covers", "Confetti", "Straws", "Candles"])
combo_party_items.grid(column=1, row=2)
entry_no_item_hired = Entry(main_window)
entry_no_item_hired.grid(column=1, row=3)
delete_item = Entry(main_window)
delete_item.grid(column=3, row=3)

main()
