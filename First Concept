########################################################################

### This program is so we know what party items customers have hired ###

########################################################################

 

#import tkinter so we can make a GUI

from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import random
import os




# quit subroutine

def quit():

    main_window.destroy()

 

def save_info():

    full_name_info = full_name.get()

    receipt_number_info = receipt_number_label.cget("text")

    party_items_info = party_items.get()

    no_items_info = no_item_hired.get()

   

    print(full_name_info, receipt_number_info, party_items_info, no_items_info)

 

    with open("reciepts.txt", "w") as file:

        file.write(f"{full_name_info}, {receipt_number_info}, {party_items_info}, {no_items_info}\n")

 

    print(full_name_info, "your order has been registered successfully")


def save_entry():
    text = entry.get()
    full_name_info = full_name.get()

    receipt_number_info = receipt_number_label.cget("text")

    party_items_info = party_items.get()

    no_items_info = no_item_hired.get()

   

    print(full_name_info, receipt_number_info, party_items_info, no_items_info)
    

        # Save the entry to a file
    with open("reciepts.txt", "a") as file:
            file.write(f"{full_name_info}, {receipt_number_info}, {party_items_info}, {no_items_info}\n")

 

    full_name_entry.delete(0, END)

    no_item_hired_entry.delete(0, END)

    party_items_entry.set('')

    receipt_number_label.config(text="")

 

# print details of all the customers

def print_customer_details():

    name_count = 0

    # Create the column headings

    Label(main_window, font=("Helvetica 10 bold"), text="Row").grid(column=0, row=7)

    Label(main_window, font=("Helvetica 10 bold"), text="Full Name").grid(column=1, row=7)

    Label(main_window, font=("Helvetica 10 bold"), text="Receipt Number").grid(column=2, row=7)

    Label(main_window, font=("Helvetica 10 bold"), text="Party Items").grid(column=3, row=7)

    Label(main_window, font=("Helvetica 10 bold"), text="No. of Items Hired").grid(column=4, row=7)

    Label(main_window, font=("Helvetica 10 bold"), text="Reciept Number").grid(column=5, row=7)

    

 

    # add each item in the list into its own row

    while name_count < counters['total_entries']:

        Label(main_window, text=name_count).grid(column=0, row=name_count + 8)

        Label(main_window, text=(customer_details[name_count][0])).grid(column=1, row=name_count + 8)

        Label(main_window, text=(customer_details[name_count][1])).grid(column=2, row=name_count + 8)

        Label(main_window, text=(customer_details[name_count][2])).grid(column=3, row=name_count + 8)

        Label(main_window, text=(customer_details[name_count][3])).grid(column=4, row=name_count + 8)
        
        Label(main_window, text=(customer_details[name_count][3])).grid(column=5, row=name_count + 8)

        

        name_count += 1

        counters['name_count'] = name_count

 

# Check the inputs are all valid

def check_inputs():

    input_check = 0
    Label(main_window, text="               ").grid(column=2, row=0)
    Label(main_window, text="               ").grid(column=2, row=1)
    Label(main_window, text="               ").grid(column=2, row=2)
    Label(main_window, text="               ").grid(column=2, row=3)

   

    # Check that name is not blank, set error text if blank

    if len(entry_full_name.get()) == 0:
        Label(main_window, bg ="lightblue", fg="red", text="Required").grid(column=2, row=0)
        input_check = 1

 

    # Check that party items have been chosen, set error text if blank

    if len(combo_party_items.get()) == 0:

        Label(main_window, bg ="lightblue", fg="red", text="Required").grid(column=2, row=2)

        input_check = 1

 

    # Check that number of items hired is not blank, set error text if blank

    if len(entry_no_item_hired.get()) == 0:

        Label(main_window, bg ="lightblue", fg="red", text="Required").grid(column=2, row=3)

        input_check = 1

 

    if input_check == 0:

        append_name()

 

# add the next customer to the list

def append_name():

    # Generate a random receipt number

    random_number = random.randint(1, 1000000)

    receipt_number_label.config(text=random_number)

   

    # Append each item to its own area of the list

    customer_details.append([entry_full_name.get(), receipt_number_label.cget("text"), combo_party_items.get(), entry_no_item_hired.get()])

   

    # Clear the boxes

    entry_full_name.delete(0, 'end')

    combo_party_items.set('')  # Clear the combo box

    entry_no_item_hired.delete(0, 'end')

    receipt_number_label.config(text="")

    counters['total_entries'] += 1


# delete a row from the list

def delete_row():

    # find which row is to be deleted and delete it

    del customer_details[int(delete_item.get())]

    counters['total_entries'] -= 1

    name_count = counters['name_count']

    delete_item.delete(0, 'end')

    # clear the last item displayed on the GUI

    Label(main_window, text="       ").grid(column=0, row=name_count + 7)

    Label(main_window, text="       ").grid(column=1, row=name_count + 7)

    Label(main_window, text="       ").grid(column=2, row=name_count + 7)

    Label(main_window, text="       ").grid(column=3, row=name_count + 7)

    Label(main_window, text="       ").grid(column=4, row=name_count + 7)

    Label(main_window, text="       ").grid(column=5, row=name_count + 7)

    

    # print all the items in the list

    print_customer_details()

 

# create the buttons and labels

def setup_buttons():

# create all the empty and default labels, buttons and entry boxes. Put them in the correct grid location

    Label(main_window, bg='lightblue', font=("MonoLisa 11"), text="Full Name",).place(x=160,y=100)

    Label(main_window, bg='lightblue', font=("MonoLisa 11"), text="Receipt Number").place(x=150, y=130)

    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Quit", command=quit, width=10).grid(column=5, row=0, sticky=E)

    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Append Details", command=check_inputs).grid(column=4, row=1)

    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Print Details", command=print_customer_details, width=10).grid(column=5, row=1, sticky=E)

    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="Party Items").grid(column=0, row=2, sticky=E)

    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="No. of Items Hired").grid(column=0, row=3, sticky=E)

    Label(main_window, bg='lightblue', font=("MonoLisa 10"), text="Row #").grid(column=4, row=2, sticky=E)

    Button(main_window, bg='lightblue', font=("MonoLisa 10"), text="Delete Row", command=delete_row, width=10).grid( column=10, row=9, sticky=E)


 

# start the program running

def main():

    # Start the GUI up

    setup_buttons()

    main_window.mainloop()



# create empty list for customer details and empty variable for entries in the list

counters = {'total_entries': 0, 'name_count': 0}

customer_details = []

main_window = Tk()
main_window.title("Customer Reciepts")
main_window.geometry("800x500")

main_window.configure(background='lightblue')

 

entry_full_name = Entry(main_window)

entry_full_name.place(x=280, y=100)


receipt_number_label = Label(main_window, text="")



combo_party_items = ttk.Combobox(main_window, values=["Napkins", "Party Hats", "Cutlery", "Balloons", "Plates", "Cups", "Banners", "Pinatas", "Table Covers", "Confetti", "Straws", "Candles"])

combo_party_items.grid(column=1, row=2)


entry_no_item_hired = Entry(main_window)

entry_no_item_hired.grid(column=1, row=3)


delete_item = Entry(main_window)

delete_item.grid(column=3, row=3)

 

main()
