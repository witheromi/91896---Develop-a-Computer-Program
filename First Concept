#Date:19/08/24
#Author: Naomi Ching
#Purpose: To create a code for Julie's store to note down customers hires. 

from tkinter import *
from tkinter import ttk, messagebox
import random

def quit_app():
    if messagebox.askokcancel("Quit", "Do you really want to quit?"):
        main_window.destroy()

def save_info():
    full_name_info = entry_full_name.get()
    receipt_number_info = entry_receipt_number.get()
    party_items_info = combo_party_items.get()
    no_items_info = entry_no_item_hired.get()

    with open("customer_details.txt", "a") as file:
        file.write(f"{receipt_number_info},{full_name_info},{party_items_info},{no_items_info}\n")

    entry_full_name.delete(0, END)
    entry_receipt_number.delete(0, END)
    combo_party_items.set('')
    entry_no_item_hired.delete(0, END)

def print_customer_details():
    for widget in main_window.grid_slaves():
        if int(widget.grid_info()["row"]) >= 8:
            widget.grid_forget()
   
    Label(main_window, bg='burlywood1', font=("Century 10 bold"), text="Row").grid(column=0, row=8)
    Label(main_window, bg='burlywood1', font=("Century 10 bold"), text="Full Name").grid(column=1, row=8)
    Label(main_window, bg='burlywood1', font=("Century 10 bold"), text="Receipt Number").grid(column=2, row=8)
    Label(main_window, bg='burlywood1', font=("Century 10 bold"), text="Party Items").grid(column=3, row=8)
    Label(main_window, bg='burlywood1', font=("Century 10 bold"), text="No. of Items Hired").grid(column=4, row=8)

    for i, details in enumerate(customer_details):
        Label(main_window, bg='burlywood1', text=i).grid(column=0, row=i+9)
        Label(main_window, bg='burlywood1', text=details[0]).grid(column=1, row=i+9)
        Label(main_window, bg='burlywood1', text=details[1]).grid(column=2, row=i+9)
        Label(main_window, bg='burlywood1', text=details[2]).grid(column=3, row=i+9)
        Label(main_window, bg='burlywood1', text=details[3]).grid(column=4, row=i+9)

def check_inputs():
    errors = []
    max_name_length = 20
    max_receipt_number_length = 6

    if len(entry_full_name.get()) == 0:
        errors.append("Full Name is required.")
    elif len(entry_full_name.get()) > max_name_length:
        errors.append("Full Name can have a maximum of {max_name_length} characters.")
    elif entry_full_name.get().isdigit():
        errors.append("Full Name should contain only alphabets.")


    receipt_number = entry_receipt_number.get()
    if len(receipt_number) == 0:
        errors.append("Receipt Number is required.")
    elif len(receipt_number) > max_receipt_number_length:
        errors.append(f"Receipt Number can have a maximum of {max_receipt_number_length} digits.")

    if len(combo_party_items.get()) == 0:
        errors.append("Party Items selection is required.")

    no_items_hired = entry_no_item_hired.get()
    if len(no_items_hired) == 0:
        errors.append("Number of Items Hired is required.")
    elif no_items_hired.isdigit() and (int(no_items_hired) < 1 or int(no_items_hired) > 500):
        errors.append("You can only hire 1-500 of your desired item.")

    if errors:
        messagebox.showerror("Input Error", "\n".join(errors))
    else:
        append_name()


def append_name():
    customer_details.append([entry_full_name.get(), entry_receipt_number.get(), combo_party_items.get(), entry_no_item_hired.get()])
    counters['total_entries'] += 1
    save_info()
    messagebox.showinfo("Success", "Customer details submitted successfully!")

def delete_row():
    row_to_delete = delete_item.get()
    
    try:
        index = int(row_to_delete)
        
        if 0 <= index < len(customer_details):
            del customer_details[index]
            counters['total_entries'] -= 1
            delete_item.delete(0, 'end')
            print_customer_details()
            messagebox.showinfo("Success", f"Row {index} deleted successfully.")
        else:
            messagebox.showerror("Error", "Invalid row number.")
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid row number.")    
       
def generate_random():
    random_number = random.randint(1, 1000000)
    entry_receipt_number.delete(0, END)
    entry_receipt_number.insert(0, random_number)

def validate_numeric_input(input_text):
    if input_text.isdigit() or input_text == "":
        return True
    return False

def validate_alpha_input(input_text):
    if input_text.isalpha() or input_text == "":
        return True
    return False

def setup_buttons():
    Label(main_window, text="Julie's Hire Store", bg='burlywood1', font=("Century 14 bold")).grid(column=1, row=0, columnspan=3, pady=10)
    Label(main_window, text="Full Name:", bg='burlywood1', font=("Century 10")).grid(column=1, row=1, sticky=E)    
    Label(main_window, text="Receipt Number:", bg='burlywood1', font=("Century 10")).grid(column=1, row=2, sticky=E)
    Button(main_window, bg='burlywood1', font=("Century 10"), text="Receipt Number #", command=generate_random).grid(column=3, row=2, padx=5)
    Label(main_window, text="Party Items:", bg='burlywood1', font=("Century 10")).grid(column=1, row=3, sticky=E)    
    Label(main_window, text="No. of Items Hired:", bg='burlywood1', font=("Century 10")).grid(column=1, row=4, sticky=E)    
    Button(main_window, bg='burlywood1', font=("Century 10"), text="Submit Details", command=check_inputs).grid(column=0, row=5, padx=5,pady=5)
    Button(main_window, bg='burlywood1', font=("Century 10"), text="Print Details", command=print_customer_details).grid(column=1, row=5, padx=5,pady=5)
    Button(main_window, bg='burlywood1', font=("Century 10"), text="Delete Row", command=delete_row).grid(column=2, row=5, padx=5, pady=5)
    Button(main_window, bg='burlywood1', font=("Century 10"), text="Quit", command=quit_app).grid(column=3, row=5, padx=5, pady=5)
    Label(main_window, text="Row #:", bg='burlywood1', font=("Century 10")).grid(column=4, row=5, padx=5, pady=5)


   
    
def main():
    setup_buttons()
    main_window.mainloop()

counters = {'total_entries': 0}
customer_details = []
main_window = Tk()
main_window.title("Julie's Hire Store")
main_window.geometry("685x450")
main_window.configure(background='burlywood1')

validate_number = main_window.register(validate_numeric_input)
validate_alpha = main_window.register(validate_alpha_input)

entry_full_name = Entry(main_window,width=20)
entry_full_name.grid(column=2, row=1)
entry_receipt_number = Entry(main_window,width=20, validate="key", validatecommand=(validate_number, "%P"))
entry_receipt_number.grid(column=2, row=2)
combo_party_items = ttk.Combobox(main_window, values=["Napkins", "Party Hats", "Cutlery", "Balloons", "Plates", "Cups", "Banners","Pinatas", "Table Covers", "Confetti", "Straws", "Candles"],width=20, state="readonly")
combo_party_items.grid(column=2, row=3)    
entry_no_item_hired = Entry(main_window,width=20, validate="key", validatecommand=(validate_number, "%P"))
entry_no_item_hired.grid(column=2, row=4)
delete_item = Entry(main_window, width=5)
delete_item.grid(column=5, row=5, padx=5, pady=5)

main()
